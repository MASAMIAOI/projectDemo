package com.masamiaoi.sqlite.util;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.util.ResourceUtils;import java.io.*;import java.sql.Connection;import java.sql.SQLException;/** * @author maamiaoi */public class SqliteUtils {    private static final Logger logger = LoggerFactory.getLogger(SqliteUtils.class);    /**     * 初始化项目db     *     * @param connection     */    public static void initProDb(Connection connection) {        //判断数据表是否存在        boolean hasPro = false;        try {            hasPro = true;            //测试数据表是否存在            connection.prepareStatement("select * from pro").execute();        } catch (SQLException e) {            //不存在            logger.debug("table pro is not exist");            hasPro = false;        }        //不存在时创建db        if (!hasPro) {            logger.debug(">>>start init pro db");            File file = null;            try {                //读取初始化数据sql                file = ResourceUtils.getFile("classpath:sql/init.sql");            } catch (FileNotFoundException e) {                e.printStackTrace();            }            //获取sql            String sql = "";            FileInputStream fis = null;            InputStreamReader isr = null;            try {                fis = new FileInputStream(file);                isr = new InputStreamReader(fis, "UTF-8");                BufferedReader bf = new BufferedReader(isr);                String content = "";                StringBuilder sb = new StringBuilder();                while (content != null) {                    content = bf.readLine();                    if (content == null) {                        break;                    }                    sb.append(content.trim());                }                sql = sb.toString();            } catch (FileNotFoundException | UnsupportedEncodingException e) {                e.printStackTrace();            } catch (IOException e) {                e.printStackTrace();            } finally {                try {                    isr.close();                    fis.close();                } catch (IOException e) {                    e.printStackTrace();                }            }            //分割sql            String[] sqls = sql.split(";");            try {                for (String str : sqls) {                    //开始初始化数据库                    connection.setAutoCommit(false);                    connection.prepareStatement(str).execute();                }                //提交sql                connection.commit();            } catch (SQLException e) {                e.printStackTrace();            } finally {                try {                    connection.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }            logger.debug("finish init pro db>>>");        } else {            logger.debug("pro db is exist");        }    }    public static void initDb(Connection connection, String... sqls) {        logger.debug(">>>start initDb:{}", sqls);        try {            for (String str : sqls) {                connection.setAutoCommit(false);                connection.prepareStatement(str).execute();            }            connection.commit();        } catch (SQLException e) {            e.printStackTrace();        } finally {            try {                connection.close();            } catch (SQLException e) {                e.printStackTrace();            }        }        logger.debug("finish initDb>>>");    }    public static void initSqliteFile(String filePath) {        File file = new File(filePath);        File dir = file.getParentFile();        if (!dir.exists()) {            dir.mkdirs();        }        if (!file.exists()) {            try {                file.createNewFile();            } catch (IOException e) {                e.printStackTrace();            }        }    }    public static String getFilePath(String url) {        url = url.replace("jdbc:sqlite:", "");        return url;    }}